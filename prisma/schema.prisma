// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}














model PostModel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  message   String   @db.VarChar(100)
}

model User {
  id            String    @id @default(cuid())
  courses       Courses[]  

  name          String?
  email         String?   @unique
  image         String?
  bio           String?   @default("") @db.VarChar(256)


  emailVerified DateTime?
  accounts      Account[]
  friends_low   User[]    @relation("friends") // list of user's friends with id < current user id
  friends_high  User[]    @relation("friends") // list of user's friends with id > current user id
  Session       Session[]
}





model Courses {
  course_code  String  @id @default(cuid())
  course_name String
  student User[]    //@relation(fields: [student_id], references: [id])
}












// ------------------------------ NEXT-AUTH -----------------------------------

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------------------------- END-NEXT-AUTH ---------------------------------
